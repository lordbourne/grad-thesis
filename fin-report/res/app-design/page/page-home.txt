主页 home 页的设计
========

# 需求分析
首页的设计图如下图所示：
![主页](img/C1_0_看图王.jpg)

首页主要实现如下功能：
- 地理定位
- 商城列表展现
- 商城搜索

## 地理定位
首次进入商城，


## 列表展现
## 商城搜索



# 模板设计，后台的管理，后台如何写介绍信息
打造博客网站，支持模块拖拽

# 模块划分
首页的页面可以划分为 3 个部分，导航条、主体和底部菜单。模块划分后有很多好处，不同页出现的相同的模块就可以直接或稍加修改后就可复用，这也是现代 Web 开发所倡导的，著名的 Angular 框架的第二代 Angular 几乎就是完全以模块或组件为核心的。本应用总体分为 3 大块，商城页、文章页、我的空间，每块都有底部菜单，此时就可以把底部的菜单部分单独抽出来，在其他页面直接插入，同样的，头部的含搜索框的导航栏也可以在文章页插入。

# 业务流程与数据传输

# 缓存方案
## 什么是 Web 缓存
当我们访问一些网站的时候，有的网站会把一些数据、文件等存储到本地，下次访问时不需要再从服务器加载，当然有时候也需要发起请求确认资源是否过期，因为有的资源会不定时更新，如果更新了还需要重新加载。
![Chrome 支持的 Web 存储方案](img/webStorage.png)
如图，当打开 Chrome 调试工具，点击 Application 一栏，左边显示了目前主流浏览器支持的存储方案，cookie 是很早就出来的存储方案，localStarage, IndexedDB, Web SQL 等

## 为什么要缓存
- 对服务器来说，减少了 http 请求次数，减轻了服务器负担，尤其当访问量很大的时候。
- 对客户端来说，减少了响应时间，因为从本地加载资源非常快，几乎是瞬间加载，而且还可以节约流量，如典型的地图应用，都会推荐客户去下载离线地图。

## 为什么不一次性加载所有商城的信息再缓存，然后进入某个店铺后直接从本地获取

一次性加载所有商城的信息再缓存，这样减少了一次请求，减轻了服务器的负担，之后的数据都在本地获取，但是随着产业的发展，店铺数量越来越多，而且每个店铺业务也可能越来越复杂，每个店铺在数据库储存大量的信息，如果一次性全部加载，会占用本地相当多的资源，本地存储的 localStorage 可以最大缓存 5MB 的数据，但对于一个大型的应用来说是不够用的，我们清理手机缓存的时候，会发现很多应用的缓存都会达到几十兆，甚至上百，如淘宝，因此一次性加载所有商城的信息的做法不可取，还是应该进入店铺的时候再次请求该店铺的数据。

## 商城部分的缓存方案
首次进入页面，请求一次商城信息，获得商城的列表，然后缓存；进入某个店铺时，再次请求服务器，获得该店铺的更多信息，然后缓存该店铺的信息，即总是缓存浏览过的店铺。


## 缓存的具体实现
首页的数据：每个商城的基本信息


不同的控制器之间
